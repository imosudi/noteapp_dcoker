INSERT INTO users(name, username, email, password) VALUES('MOsudi Isiaka', 'imosudi', 'imosudi@gmail.com', 'password');
INSERT INTO users(name, username, email, password) VALUES('MOs Isiaka', 'mosud', 'mimosudi@gmail.com', 'password');
INSERT INTO users(name, username, email, password) VALUES('MOs Is', 'mosudi', 'mosudi@gmail.com', 'password');

from flask import Flask
from flask_bootstrap import Bootstrap
from flask_moment import Moment
from flask_mysqldb import MySQL
import mysql.connector as mariadb


from .models import *

app = Flask(__name__)
app.config['SECRET_KEY'] = 'hard to guess string'

bootstrap = Bootstrap(app)

moment = Moment(app)


"""#Config MySQL
app.config['MYSQL_HOST'] = '172.17.0.2'
app.config['MYSQL_USER'] = 'noteappdb'
#app.config['MYSQL_PASSWORD'] = 'imosudi@gmail.com'
app.config['MYSQL_PASSWORD'] = 'password'
app.config['MYSQL_DB'] = 'noteappdb'
app.config['MYSQL_CURSORCLASS'] = 'DictCursor'



# init MySQL
mysql = MySQL(app)"""

#Config MySQL
config = {
	'host': 'db',
        'database': 'noteappdb',
        'user': 'noteappdb',
        'password': 'password'
        }

# init MySQL
mysql = MySQL(app)

"""
#Config Mariadb
config = {
    'host': 'db',
    'port': '3306',
    'user': 'noteappdb',
    #'password': 'PASSWimosudi@gmail.co767868FFGFFDD#m',
    'password': 'password',
    'database': 'noteappdb'
}
"""
#I will use this to for my conections within the application
''' # connection for MariaDB
   conn = mariadb.connect(**config)
   # create a connection cursor
   cur = conn.cursor()
   # execute a SQL statement
   cur.execute("select * from people")
'''


from .views import main
app.register_blueprint(main)

#from app import views




from flask import render_template, Blueprint, request, flash, redirect, url_for


from flask_wtf import FlaskForm
from wtforms import Form, BooleanField, StringField, PasswordField, validators, SubmitField, IntegerField, HiddenField
from wtforms.validators import Required
from passlib.hash import sha256_crypt



from app import app


from .models import *

import mysql.connector as mariadb

import pymysql.cursors


"""
config = {
    'host': 'db',
    'port': '3306',
    'user': 'noteappdb',
    #'password': 'PASSWimosudi@gmail.co767868FFGFFDD#m',
    'password': 'password',
    'database': 'noteappdb'
}
"""


#mariadb_connection = mariadb.connect(host='172.17.0.2', port='3306', user='root', password='sPASSWimosudi@gmail.co767868FFGFFDD#m', database='noteappdb')

from datetime import datetime

main =  Blueprint('main', __name__)

loggedin =  Blueprint('loggedin', __name__)

@main.route('/')
def home():
	pageName='home'
	return render_template('home.html', pageName=pageName, current_time=datetime.utcnow())
	#("home.html", pageName=pageName, current_time=datetime.utcnow())
	pass



@main.route('/about')
def about():
    pageName = "about"
    return render_template('about.html', pageName=pageName, current_time=datetime.utcnow())
    pass

"""# User registration
@app.route('/register', methods=['GET', 'POST'])
def register():
    pageName= 'register'
    return render_template('register.html', form=form, pageName=pageName, current_time=datetime.utcnow())
"""
# User login
@main.route('/login', methods=['GET', 'POST'])
def login():
	pageName = 'login'
	form = loginForm(request.form)
	if request.method == 'POST':
		# login form data
		username = request.form['username']
		password_candidate = request.form['password']

				
		#Connect to DB server
		conn = mariadb.connect(**config)
		
		
		# login cursor
		cur = conn.cursor()

		# Getting looking up for the user in the database by username
		result = cur.execute("SELECT * FROM users WHERE username = %s", [username])
		print (result)

		if result != None :
			#Extract hash
			data = cur.fetchone()
			password = data['password']
			name = data['name'] #Fetching Name Details from Database

			#Compare passwords
			if sha256_crypt.verify(password_candidate, password):
				#Getting session details
				session['logged_in'] = True
				session['username'] = username
				session['name'] = name

				flash(u'Login successful', 'success')
				return redirect(url_for('dashboard'))

			else:
				#app.logger.info('PASSWORD NOT MATCHED')
				error = 'Invalid login'
				return render_template('login.html', pageName=pageName, form=form, current_time=datetime.utcnow(), error=error)

			# Close database connection
			cur.close()


		else:
			#app.logger.info('NO USER FOUND')
			error = 'Username not found'
			return render_template('login.html', pageName=pageName, form=form, current_time=datetime.utcnow(), error=error)

	else:
		return render_template('login.html', pageName=pageName, form=form, current_time=datetime.utcnow())

"""@app.route("/")
def home():
	return render_template("home.html", pageName=pageName, current_time=datetime.utcnow())
	pass"""


#User registration
@main.route('/register', methods=['GET', 'POST'])
def register():
	pageName = 'register'
	form = registrationForm(request.form)
	if request.method == 'POST' and  form.validate():
		name = form.name.data
		username = form.username.data
		email = form.email.data
		password = sha256_crypt.encrypt(str(form.password.data))
		#password = form.password.data
		
		
		#Connect to DB server
		conn = mariadb.connect(**config)
		
		# create a connection cursor
		#conn = mariadb.connect(**config)

		# login cursor 
		cur = conn.cursor()

		cur.execute("INSERT INTO users(name, username, email, password) VALUES(%s,	\
	 %s, %s,%s)", (name, username, email, password))

		# Commit to database
		#con.connection.commit()

		# Close database connection
		cur.close()

		flash(u"Registration Complete, you may proceed to login", "success")

		return redirect(url_for('main.home'))

	else:
		return render_template('register.html', form=form, pageName=pageName,  current_time=datetime.utcnow())




@app.errorhandler(404)
def page_not_found(e):
    return render_template('404.html', current_time=datetime.utcnow()), 404

@app.errorhandler(500)
def internal_server_error(e):
    return render_template('500.html', current_time=datetime.utcnow()), 500









    
    
    
#import virtualenv python library directory
import os
import sys
sys.path.insert(0, '/var/www/clients/client6/web28/cgi-bin/venv/lib/python2.7/site-packages')

#Import from noteapp.py
from noteapp import db


#import installed library
from flask_wtf import FlaskForm 
 
from wtforms import StringField, SubmitField, IntegerField, HiddenField, validators, BooleanField, PasswordField
from wtforms.validators import Required



class Note(db.Model): 
    id = db.Column(db.Integer, primary_key=True) 
    title = db.Column(db.String(80))
    body = db.Column(db.Text)
 
    def __init__(self, title, body): 
        self.title = title
        self.body = body

class registrationForm(FlaskForm):
    username = StringField('Username', [validators.Length(min=4, max=25)])
    email = StringField('Email Address', [validators.Length(min=6, max=35)])
    password = PasswordField('New Password', [ 
        validators.DataRequired(), 
        validators.EqualTo('confirm', message='Passwords must match')
    ])
    confirm = PasswordField('Repeat Password')
    accept_tos = BooleanField('I accept the TOS', [validators.DataRequired()])
    submit = SubmitField('Complete Registeration')

class RegistrationForm(db.Model):
    __tablename__ = 'registrationforms'
    id = db.Column(db.Integer, primary_key=True)
    username = db.Column(db.String(64), unique=True, index=True)
    email = db.Column(db.String(64), unique=True)
    password = db.Column(db.String(64))
    accept_tos = db.Column(db.Boolean)

    title = db.Column(db.String(80))
    body = db.Column(db.Text)

    def __init__(self, username, email, password, accept_tos):
        self.username = username
        self.email = email
        self.password = password
        self.accept_tos = accept_tos

#import virtualenv python library directory
import os
import sys
sys.path.insert(0, '/var/www/clients/client6/web28/cgi-bin/venv/lib/python2.7/site-packages')


#import installed library
from flask import Flask, render_template, redirect, request, session
from flask_bootstrap import Bootstrap
from flask_admin import Admin
from flask_moment import Moment
from datetime import datetime
#from flask_script import Manager
from flask_wtf import FlaskForm

from wtforms import BooleanField, StringField, PasswordField, validators, SubmitField, IntegerField, HiddenField
from wtforms.validators import Required



#Third party imports
from flask_sqlalchemy import SQLAlchemy


#Create application
app = Flask(__name__)  
app.config['SECRET_KEY'] = 'This is really hard to guess string'  
  
bootstrap = Bootstrap(app)  
moment = Moment(app)  
admin = Admin(app)  
#manager = Manager(app)  

#SQLITE SQLALCHEMY
basedir = os.path.abspath(os.path.dirname(__file__))  
app.config['SQLALCHEMY_DATABASE_URI'] = 'sqlite:///' + os.path.join(basedir, 'app.sqlite')  
app.config['SQLALCHEMY_TRACK_MODIFICATIONS'] = True  
db = SQLAlchemy(app)  
                     
"""
python
from noteapp import db
db.create_all()
"""

from models import *



@app.route("/")
def home():
    pageName = "home"
    return render_template("home.html", pageName=pageName, current_time=datetime.utcnow())


@app.route("/notes/create", methods=["GET", "POST"])  
def create_note():
    pageName = "/notes/create"
    if request.method == "GET":
        return render_template("create_note.html", pageName=pageName, current_time=datetime.utcnow())
    else:
        title = request.form["title"]
        body = request.form["body"]  
        note = Note(title=title, body=body)
        db.session.add(note)
        db.session.commit()
        return redirect("/notes/create", form=form, current_time=datetime.utcnow())

@app.route("/notes", methods=["GET", "POST"])  
def notes():
    pageName = "/notes"
    notes = Note.query.all()
    return render_template("notes.html", notes=notes, pageName=pageName, current_time=datetime.utcnow())

@app.route('/register', methods=['GET', 'POST'])
def register():
    pageName= "/register"
    form = registrationForm()
    form2 = registrationForm()
    return render_template('register.html', form=form, form2=form2, pageName=pageName,  current_time=datetime.utcnow())



if __name__ == "__main__":
    app.run(host='0.0.0.0', debug=True)
    #manager.run(
    

#User registration
@main.route('/register', methods=['GET', 'POST'])
def register():
	pageName = 'register'
	form = registrationForm(request.form)
	if request.method == 'POST' and  form.validate():
		name = form.name.data
		username = form.username.data
		email = form.email.data
		password = sha256_crypt.encrypt(str(form.password.data))
		#password = form.password.data
		
		
		#Connect to DB server
		conn = mariadb.connect(**config)
		
		# create a connection cursor
		#conn = mariadb.connect(**config)

		# login cursor 
		cur = conn.cursor()

		cur.execute("INSERT INTO users(name, username, email, password) VALUES(%s,	\
	 %s, %s,%s)", (name, username, email, password))

		# Commit to database
		#con.connection.commit()

		# Close database connection
		cur.close()

		flash(u"Registration Complete, you may proceed to login", "success")

		return redirect(url_for('main.home'))

	else:
		return render_template('register.html', form=form, pageName=pageName,  current_time=datetime.utcnow())

